def safeExtGet(prop, fallback) {
    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.mob.sdk'

group = "com.fenguwxp.share.reactnative"
archivesBaseName = "fengwuxp-share"
version = "1.0.0"

buildscript {
    repositories {
        mavenLocal()
        google()
        jcenter()
        maven() {
            url 'http://repo.codeboot.net/maven/'
        }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        classpath 'com.mob.sdk:MobSDK:+'
    }
}

repositories {
    maven {
        url "http://mvn.mob.com/android"
    }
    mavenLocal()
    google()
    jcenter()
    maven {
        url 'http://repo.codeboot.net/maven/'
    }
    maven {
        url "http://nexus.oaknt.com:18081/repository/maven-public/"
        credentials {
            username = "anonymous"
            password = ""
        }
    }
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 28)
    buildToolsVersion safeExtGet('buildToolsVersion', '28.0.3')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 19)
        targetSdkVersion safeExtGet('targetSdkVersion', 28)
        versionCode 1
        versionName "${version}"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

MobSDK {
//    appKey ""
//    appSecret ""

    ShareSDK {
        //平台配置信息
        devInfo {
            Email {

            }
            SinaWeibo {

            }
            Wechat {

            }
            WechatFavorite {

            }
            WechatMoments {

            }
            QQ {

            }
            QZone {

            }
            TencentWeibo {

            }
            YouDao {

            }
            ShortMessage {

            }
            Linkedin {

            }
            Facebook {

            }
        }
    }

}

publishing {
    publications {
        Release(MavenPublication) {
            groupId = "${group}"
            artifactId = "${archivesBaseName}"
            version = "${version}"
            pom.packaging = 'arr'
            afterEvaluate {
                artifact bundleReleaseAar
            }
            pom.withXml {
                final dependenciesNode = asNode().appendNode('dependencies')
                ext.addDependency = { Dependency dep, String scope ->
                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                        return
                    final dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dep.group)
                    dependencyNode.appendNode('artifactId', dep.name)
                    dependencyNode.appendNode('version', dep.version)
                    dependencyNode.appendNode('scope', scope)

                    if (!dep.transitive) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        exclusionNode.appendNode('groupId', '*')
                        exclusionNode.appendNode('artifactId', '*')
                    } else if (!dep.properties.excludeRules.empty) {
                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                        dep.properties.excludeRules.each { ExcludeRule rule ->
                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                        }
                    }
                }
                configurations.compile.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.compileOnly.getAllDependencies().each { dep -> addDependency(dep, "compileOnly") }
                configurations.api.getAllDependencies().each { dep -> addDependency(dep, "compile") }
                configurations.implementation.getAllDependencies().each { dep -> addDependency(dep, "runtime") }
            }
        }
    }

    repositories {
    }
}

dependencies {
//    embedded fileTree(include: ['*.jar'], dir: 'libs')
//    implementation(group: 'com.fengwuxp.android', name: 'mob-shareSDK', version: '1.0.0', ext: 'aar')
//    compileOnly 'com.fengwuxp.android:mob-shareSDK:1.0.0'
//    implementation 'com.levin.android.weex.support:mob-shareSDK:1.0.0'
//    compileOnly group: 'com.fengwuxp.android', name: 'mob-shareSDK', version: '1.0.0', versionCode: 1, versionName: '1.0', ext: 'aar', transitive: true
    compileOnly 'com.facebook.react:react-native:0.61.2'
    // https://mvnrepository.com/artifact/com.mob.sdk/MobSDK-Impl
    implementation group: 'com.mob.sdk', name: 'MobSDK-Impl', version: '2019.1015.1928'

}

